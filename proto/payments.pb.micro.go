// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/payments.proto

package payments

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Payments service

func NewPaymentsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Payments service

type PaymentsService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Payments_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Payments_PingPongService, error)
}

type paymentsService struct {
	c    client.Client
	name string
}

func NewPaymentsService(name string, c client.Client) PaymentsService {
	return &paymentsService{
		c:    c,
		name: name,
	}
}

func (c *paymentsService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Payments.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Payments_StreamService, error) {
	req := c.c.NewRequest(c.name, "Payments.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &paymentsServiceStream{stream}, nil
}

type Payments_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type paymentsServiceStream struct {
	stream client.Stream
}

func (x *paymentsServiceStream) Close() error {
	return x.stream.Close()
}

func (x *paymentsServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *paymentsServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *paymentsServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *paymentsServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *paymentsService) PingPong(ctx context.Context, opts ...client.CallOption) (Payments_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Payments.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &paymentsServicePingPong{stream}, nil
}

type Payments_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type paymentsServicePingPong struct {
	stream client.Stream
}

func (x *paymentsServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *paymentsServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *paymentsServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *paymentsServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *paymentsServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *paymentsServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Payments service

type PaymentsHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Payments_StreamStream) error
	PingPong(context.Context, Payments_PingPongStream) error
}

func RegisterPaymentsHandler(s server.Server, hdlr PaymentsHandler, opts ...server.HandlerOption) error {
	type payments interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Payments struct {
		payments
	}
	h := &paymentsHandler{hdlr}
	return s.Handle(s.NewHandler(&Payments{h}, opts...))
}

type paymentsHandler struct {
	PaymentsHandler
}

func (h *paymentsHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.PaymentsHandler.Call(ctx, in, out)
}

func (h *paymentsHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.PaymentsHandler.Stream(ctx, m, &paymentsStreamStream{stream})
}

type Payments_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type paymentsStreamStream struct {
	stream server.Stream
}

func (x *paymentsStreamStream) Close() error {
	return x.stream.Close()
}

func (x *paymentsStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *paymentsStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *paymentsStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *paymentsStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *paymentsHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.PaymentsHandler.PingPong(ctx, &paymentsPingPongStream{stream})
}

type Payments_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type paymentsPingPongStream struct {
	stream server.Stream
}

func (x *paymentsPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *paymentsPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *paymentsPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *paymentsPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *paymentsPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *paymentsPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
